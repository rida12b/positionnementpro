from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import json
import os
from dotenv import load_dotenv
import google.generativeai as genai

# Chargement des variables d'environnement
load_dotenv()

# Configuration de Gemini
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
model = genai.GenerativeModel('gemini-pro')

app = FastAPI()

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les de donn√©es
class UserResponse(BaseModel):
    question_id: int
    answer: str

# Questions g√©n√©riques initiales
GENERIC_QUESTIONS = {
    1: {
        "id": 1,
        "text": "Qu'est-ce qui te passionne le plus dans la vie ?",
        "options": [
            {"id": "creative", "text": "Cr√©er et imaginer de nouvelles choses"},
            {"id": "social", "text": "√âchanger et partager avec les autres"},
            {"id": "analytical", "text": "Comprendre et analyser le monde"},
            {"id": "practical", "text": "Construire et r√©aliser des projets concrets"}
        ]
    },
    2: {
        "id": 2,
        "text": "Comment pr√©f√®res-tu passer ton temps libre ?",
        "options": [
            {"id": "learning", "text": "Apprendre de nouvelles choses"},
            {"id": "helping", "text": "Aider et conseiller les autres"},
            {"id": "making", "text": "Fabriquer ou cr√©er quelque chose"},
            {"id": "exploring", "text": "Explorer et d√©couvrir"}
        ]
    },
    3: {
        "id": 3,
        "text": "Qu'est-ce qui te motive naturellement ?",
        "options": [
            {"id": "impact", "text": "Avoir un impact positif sur les autres"},
            {"id": "knowledge", "text": "Acqu√©rir de nouvelles connaissances"},
            {"id": "creation", "text": "Exprimer ma cr√©ativit√©"},
            {"id": "challenge", "text": "Relever des d√©fis personnels"}
        ]
    },
    4: {
        "id": 4,
        "text": "Dans quel type d'environnement te sens-tu le plus √† l'aise ?",
        "options": [
            {"id": "calm", "text": "Un environnement calme et organis√©"},
            {"id": "dynamic", "text": "Un environnement dynamique et vari√©"},
            {"id": "nature", "text": "Un environnement proche de la nature"},
            {"id": "creative", "text": "Un environnement cr√©atif et inspirant"}
        ]
    },
    5: {
        "id": 5,
        "text": "Qu'est-ce qui compte le plus pour toi ?",
        "options": [
            {"id": "freedom", "text": "La libert√© d'√™tre moi-m√™me"},
            {"id": "harmony", "text": "L'harmonie avec les autres"},
            {"id": "growth", "text": "L'√©volution personnelle"},
            {"id": "achievement", "text": "L'accomplissement de mes objectifs"}
        ]
    }
}

@app.get("/")
async def read_root():
    return {"message": "Bienvenue sur l'API du Conseiller d'Orientation!"}

@app.get("/questions/{question_id}")
async def get_question(question_id: int):
    return GENERIC_QUESTIONS.get(question_id, {"error": "Question non trouv√©e"})

@app.post("/generate_questions")
async def generate_questions(responses: List[UserResponse]):
    try:
        formatted_responses = [
            {
                "question": GENERIC_QUESTIONS[r.question_id]["text"] if r.question_id <= 5 else "Question personnalis√©e",
                "r√©ponse": next(
                    (opt["text"] for opt in GENERIC_QUESTIONS[r.question_id]["options"] if opt["id"] == r.answer),
                    r.answer
                ) if r.question_id <= 5 else r.answer
            }
            for r in responses
        ]
        
        cycle = (len(formatted_responses) // 5) + 1
        print(f"üîÑ D√©but de la g√©n√©ration des questions pour le cycle {cycle}/3")
        print(f"üìù R√©ponses pr√©c√©dentes : {json.dumps(formatted_responses, indent=2, ensure_ascii=False)}")
        
        prompt = f"""En tant qu'expert en orientation professionnelle, g√©n√®re EXACTEMENT 5 questions pour le cycle {cycle}/3.

ATTENTION : Tu DOIS g√©n√©rer EXACTEMENT 5 questions, ni plus ni moins.

Format JSON STRICT √† respecter :
[
  {{
    "id": {6 + (cycle-1)*5},
    "text": "Question courte et claire ?",
    "options": [
      {{"id": "option1", "text": "R√©ponse simple et concise"}},
      {{"id": "option2", "text": "Autre r√©ponse claire"}},
      {{"id": "option3", "text": "Troisi√®me option pr√©cise"}},
      {{"id": "option4", "text": "Derni√®re option"}}
    ]
  }},
  ... EXACTEMENT 4 questions suppl√©mentaires avec le m√™me format
]

R√àGLES ABSOLUES :
1. EXACTEMENT 5 questions, ni plus ni moins
2. IDs EXACTS : {6 + (cycle-1)*5} √† {10 + (cycle-1)*5}
3. EXACTEMENT 4 options par question
4. Format JSON strict sans d√©coration
5. Pas de texte avant ou apr√®s le JSON
6. Questions courtes et claires
7. Options concises et pr√©cises

Th√®me pour le cycle {cycle}/3 :
{{"1": "Passions (activit√©s pr√©f√©r√©es, moments de flow, sources d'√©nergie)",
"2": "Valeurs (fiert√©, confiance, environnement id√©al, relations)",
"3": "Vision (succ√®s personnel, impact souhait√©, vie √©panouie, aspirations)"}}[str(cycle)]"""

        print("ü§ñ Envoi du prompt √† Gemini...")
        
        max_retries = 3
        current_try = 0
        
        while current_try < max_retries:
            current_try += 1
            print(f"üîÑ Tentative {current_try}/{max_retries}")
            
            try:
                response = model.generate_content(prompt)
                response_text = response.text.strip()
                
                print(f"üì• R√©ponse brute de Gemini :")
                print(response_text)
                
                # Nettoyage du JSON
                if response_text.startswith('```json'):
                    response_text = response_text[7:]
                if response_text.startswith('```'):
                    response_text = response_text[3:]
                if response_text.endswith('```'):
                    response_text = response_text[:-3]
                response_text = response_text.strip()
                
                # Suppression des caract√®res sp√©ciaux et espaces superflus
                response_text = response_text.replace('\n', ' ').replace('\r', ' ')
                response_text = ' '.join(response_text.split())
                
                print(f"üßπ JSON nettoy√© :")
                print(response_text)
                
                # Premier essai de parsing
                try:
                    questions = json.loads(response_text)
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è Erreur de parsing JSON : {str(e)}")
                    # Tentative de correction
                    response_text = response_text.replace('""', '"')
                    response_text = response_text.replace(',,', ',')
                    response_text = response_text.replace('[,', '[')
                    response_text = response_text.replace(',]', ']')
                    print("üîß Tentative de correction du JSON :")
                    print(response_text)
                    questions = json.loads(response_text)
                
                # V√©rification du nombre de questions
                if not isinstance(questions, list):
                    print("‚ùå Erreur : La r√©ponse n'est pas un tableau")
                    if current_try < max_retries:
                        continue
                    raise ValueError("Format de r√©ponse invalide : tableau attendu")
                
                if len(questions) != 5:
                    print(f"‚ùå Erreur : Nombre de questions incorrect ({len(questions)})")
                    # Tentative de correction automatique
                    if len(questions) < 5:
                        print("üîß Tentative d'ajout de questions manquantes")
                        while len(questions) < 5:
                            new_id = 6 + (cycle-1)*5 + len(questions)
                            questions.append({
                                "id": new_id,
                                "text": f"Question suppl√©mentaire {len(questions) + 1} ?",
                                "options": [
                                    {"id": "option1", "text": "Premi√®re option"},
                                    {"id": "option2", "text": "Deuxi√®me option"},
                                    {"id": "option3", "text": "Troisi√®me option"},
                                    {"id": "option4", "text": "Quatri√®me option"}
                                ]
                            })
                    elif len(questions) > 5:
                        print("üîß Suppression des questions en exc√®s")
                        questions = questions[:5]
                
                # Validation de chaque question
                for i, q in enumerate(questions):
                    expected_id = 6 + (cycle-1)*5 + i
                    if q["id"] != expected_id:
                        print(f"‚ö†Ô∏è Correction de l'ID : {q['id']} -> {expected_id}")
                        q["id"] = expected_id
                    
                    if not isinstance(q.get("options"), list) or len(q["options"]) != 4:
                        print(f"‚ùå Erreur : Options incorrectes pour la question {i+1}")
                        if current_try < max_retries:
                            continue
                        raise ValueError(f"La question {i+1} doit avoir exactement 4 options")
                
                print("‚úÖ Validation r√©ussie !")
                return {"questions": questions}
                
            except Exception as e:
                print(f"‚ùå Erreur lors de la tentative {current_try} :", str(e))
                if current_try == max_retries:
                    raise
        
        raise Exception("Nombre maximum de tentatives atteint")
        
    except Exception as e:
        print("‚ùå Erreur finale :", str(e))
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la g√©n√©ration des questions : {str(e)}. Veuillez r√©essayer."
        )

# Fonction pour calculer la similarit√© entre deux cha√Ænes
def similar(a: str, b: str) -> float:
    """Calcule la similarit√© entre deux cha√Ænes en utilisant la distance de Levenshtein."""
    from difflib import SequenceMatcher
    return SequenceMatcher(None, a, b).ratio()

@app.post("/recommend")
async def get_recommendations(responses: List[UserResponse]):
    try:
        print("üîÑ D√©but de la g√©n√©ration des recommandations")
        formatted_responses = [
            {
                "question": GENERIC_QUESTIONS[r.question_id]["text"] if r.question_id <= 5 else "Question personnalis√©e",
                "r√©ponse": next(
                    (opt["text"] for opt in GENERIC_QUESTIONS[r.question_id]["options"] if opt["id"] == r.answer),
                    r.answer
                ) if r.question_id <= 5 else r.answer
            }
            for r in responses
        ]
        
        print(f"üìù Analyse des r√©ponses : {json.dumps(formatted_responses, indent=2, ensure_ascii=False)}")
        
        prompt = f"""En tant qu'expert en orientation professionnelle, analyse ces r√©ponses et propose des recommandations de carri√®re d√©taill√©es.

Voici les r√©ponses du candidat :
{json.dumps(formatted_responses, indent=2, ensure_ascii=False)}

IMPORTANT : Respecte STRICTEMENT ce format de r√©ponse :

‚ú® ANALYSE DU PROFIL
[Analyse d√©taill√©e des points forts, motivations et aspirations du candidat]

üéØ M√âTIERS RECOMMAND√âS

1. [Nom du m√©tier] (Match : XX%)
Description : [Description d√©taill√©e du m√©tier]

Points de concordance :
‚Ä¢ [Point 1]
‚Ä¢ [Point 2]
‚Ä¢ [Point 3]

Comp√©tences √† d√©velopper :
‚Ä¢ [Comp√©tence 1]
‚Ä¢ [Comp√©tence 2]
‚Ä¢ [Comp√©tence 3]

Parcours recommand√© :
‚Ä¢ [√âtape 1]
‚Ä¢ [√âtape 2]
‚Ä¢ [√âtape 3]

[R√©p√©ter exactement le m√™me format pour 2 autres m√©tiers]

R√àGLES IMPORTANTES :
1. Inclure EXACTEMENT 3 m√©tiers
2. Chaque m√©tier doit avoir un score de correspondance (Match : XX%)
3. Respecter strictement les sections (Description, Points de concordance, etc.)
4. Utiliser des puces (‚Ä¢) pour les listes
5. √ätre concret et sp√©cifique dans les recommandations"""

        print("ü§ñ Envoi du prompt √† Gemini...")
        
        max_retries = 3
        current_try = 0
        
        while current_try < max_retries:
            try:
                current_try += 1
                print(f"üîÑ Tentative {current_try}/{max_retries}")
                
                response = model.generate_content(prompt)
                recommendations = response.text.strip()
                
                # V√©rification du format
                if "‚ú® ANALYSE DU PROFIL" not in recommendations or "üéØ M√âTIERS RECOMMAND√âS" not in recommendations:
                    print("‚ùå Format incorrect : sections manquantes")
                    if current_try < max_retries:
                        continue
                    raise ValueError("Format de r√©ponse incorrect")
                
                # V√©rification des m√©tiers
                if recommendations.count("Match :") < 3:
                    print("‚ùå Nombre incorrect de m√©tiers recommand√©s")
                    if current_try < max_retries:
                        continue
                    raise ValueError("Nombre incorrect de m√©tiers recommand√©s")
                
                print("‚úÖ Recommandations g√©n√©r√©es avec succ√®s !")
                return {"recommendations": recommendations}
                
            except Exception as e:
                print(f"‚ùå Erreur lors de la tentative {current_try} :", str(e))
                if current_try == max_retries:
                    raise
        
        raise Exception("Nombre maximum de tentatives atteint")
        
    except Exception as e:
        print("‚ùå Erreur finale :", str(e))
        raise HTTPException(
            status_code=500,
            detail="Une erreur est survenue lors de la g√©n√©ration des recommandations. Veuillez r√©essayer."
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 